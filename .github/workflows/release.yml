name: Build and Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  build-mac:
    runs-on: macos-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Extract version from latest tag
        id: extract_latest_version
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          version=${latest_tag#v}
          echo "Latest tag is $latest_tag"
          echo "Version without 'v': $version"
          echo "version=$version" >> $GITHUB_ENV
          
      - name: Build the application
        run: npm run build

      - name: Build Electron application for macOS
        run: npm run build:mac

      - name: List files for debugging
        run: ls -R dist/

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: release-mac
          path: |
            dist/**/*${{ env.VERSION }}*.dmg
            dist/**/*${{ env.VERSION }}*.zip
          if-no-files-found: ignore

  build-win:
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Set OSTYPE environment variable
        run: echo "OSTYPE=windows" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Extract version from latest tag
        id: extract_latest_version
        shell: bash
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          version=${latest_tag#v}
          echo "Latest tag is $latest_tag"
          echo "Version without 'v': $version"
          echo "version=$version" >> $GITHUB_ENV
          
      - name: Build Electron application for Windows
        run: npm run build:win

      - name: List files for debugging
        run: ls -R dist/

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: release-win
          path: |
            dist/**/*${{ env.VERSION }}*.exe
          if-no-files-found: ignore

#  build-linux:
#      runs-on: ubuntu-latest
#      strategy:
#        matrix:
#          node-version: [20.x]
#      steps:
#        - name: Checkout code
#          uses: actions/checkout@v2
#        - name: Set up Node.js
#          uses: actions/setup-node@v2
#          with:
#            node-version: ${{ matrix.node-version }}
#        - name: Install dependencies
#          run: npm install
#        - name: Install build dependencies
#          run: |
#            sudo apt-get update
#            sudo apt-get install -y libgtk-3-dev libgconf-2-4 libnss3 libxss1 libasound2 snapd
#            sudo snap install snapcraft --classic
#        - name: Build the application
#          run: npm run build
#        - name: Build Electron application for Linux
#          run: npm run build:linux
#        - name: Upload Release Assets
#          uses: actions/upload-artifact@v3
#          with:
#            name: release-linux
#            path: dist/linux

  publish:
    needs: [build-mac, build-win]
      
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Release Assets from macOS
        uses: actions/download-artifact@v3
        with:
          name: release-mac
          path: dist/release

      - name: Download Release Assets from Windows
        uses: actions/download-artifact@v3
        with:
          name: release-win
          path: dist/release

      - name: List files for debugging
        run: ls -R dist/

      - name: Generate changelog
        id: generate_changelog
        run: |
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s
          CHANGELOG=$(cat CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get contributors
        id: get_contributors
        run: |
          CONTRIBUTORS=$(git shortlog -sne HEAD | awk '{for (i=2; i<NF-1; i++) printf $i " "; print $(NF-1)}')
          echo "CONTRIBUTORS<<EOF" >> $GITHUB_ENV
          echo "$CONTRIBUTORS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
#          files: dist/release/**/*
          files: dist/release/*
          body: |
            ## Changelog
            ${{ env.CHANGELOG }}

            ## Contributors
            ${{ env.CONTRIBUTORS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
